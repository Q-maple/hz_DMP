1. 数组的操作
	filter(条件) 过滤
	map  业务操作方法（比较常用的）
	
	案例练习
	需求：移除第一个负数之后的所有负数
	val a = ArrayBuffer[Int](1,2,3,4,5,-1,-3,-9)
	var flag = false
	var index =0
	var arrayLength = a.length
	while(index< arrayLength){
	if(a(index)>=0){
	index+=1
	}else{
	if(!flag){flag = true;index+=1}else{
	a.remove(index);arrayLength-=1
	}
	}
	}

2. Map（映射）和Tuple（重点）
	可变和不可变之分，和数组一样，默认都是不可变的
	HashMap（可变和不可变）
	获取Map元素的时候，通过getOrElse方式获取，这种方式比较好，第一个参数是获取Key ，第二个参数是如果Key不存在，那么将返回第二参数
	SortedMap 排序Map 按照Key进行排序（不可变的Map）
	LinkedHashMap 记录插入的元素顺序
	
	Tuple（元组） 取值的方式  ._1  .... 并且下标是从1开始的
	
	zip拉练操作 进行拉取数据的时候，会形成新的数组，然后内部的值变成Tuple形式

3. 面向对象编程（重点）
	1. 伴生类和伴生对象：如果在同一个scala文件当中，出现相同类名和对象名的情况，就叫做伴生关系，可以相互访问各自私有的变量和方法，注意，当私有变量前面加上[this] 修饰的时候，代表只能在本类使用，伴生对象都不行，也就说比private修饰更加严格的形式。
	如果在定义变量的时候，用var声明的代表有get和set的方法，而val声明的只有get方法
	
	2. 构造器（相当于java构造方法中的构造参数）
	构造器分为两种：主构造器，辅助构造器
	如果我们想去使用辅助构造器的话，需要先去实现主构造器参数列表，才可以去使用辅助构造器，并且辅助构造器不能定义相同参数的列表，说白了主构造器就是我们的class名所传入的参数
	
	3. 对象
	object相当于class的单个实例，通常都会在里面放一些静态的变量和方法。
	静态方法包括：工具类，JDBC连接，其他的一些连接。。
	如果使用object对象的话，当我们调用内部方法和常量的时候，不需要new对象，并且它内部实现了初始化操作，而且也实现序列化。
	
	4. 抽象类 abstract
	在scala中抽象类和java的抽象类一样，都不可以被实例化，当继承抽象类之后，必须实现内部的抽象方法。
	如果内部没有给出具体实现的变量或者方法都属于抽象的方法和变量,抽象变量在被实现时可以使用构造方法中的参数进行赋值
	
	5. Apply()函数
	初始化函数，进行内部初始化的
	如果我们不去实现Main的话可以直接继承APP关键字，来实现Main的行为
	
	6. 继承 extends
	Scala中，让子类继承父类，与java一样的，也是使用extends关键字，继承其实就是子类继承父类的一些方法和属性，当然子类可以拥有父类没有的方法和属性
		1. Override和supper
		Override：如果子类要覆盖一个父类中的非抽象方法，则必须使用Override关键字
		Super：如果我们在子类中就是要调用父类被覆盖的方法，要使用super关键字
		
	7. 类型转换（父类与子类转换）isInstanceOf和asInstanceOf
	isInstanceOf调用时只可以子类调用时true ,即子类是父类类型 反过来为false
	如果以后用到类型转换的话，需要进行判断，不能直接转换，除非你知道他的子类属于当前父类
	getClass和classOf 
	此种比较直接比较的是对象的原始类,即忽略子类对象指向父类引用的情况,原始类不同即为false
	可以精准定位到转换类型的本身，如果符合转换要求，就直接转换，转不了就抛出异常
	
4. 面向对象编程之Trait（特质）
	它是Scala语言中的一个特殊概念，相当于Java中的接口一样。
	继承特质的话，也是用extends关键字，并且它可以实现多重继承，用with关键字
	
	一般在Spark中都用于打log操作
	在scala中，trait也可以继承class，此时trait就是这个类的父类

5. 函数式编程（重点）
	函数的定义：val m1 =(x:Int,y:Int)=>{x+y}
	方法：def f1(x:Int):Int ={x*x}
	
	高阶函数		----> arr     :    	Array[Int] = Array(2, 4, 6, 8, 10, 12, 14, 16, 18)
	map: 处理每一个元素，有返回值 			----->   arr.map(_ % 2)
	foreach：循环每一个元素，无返回值			----->		arr.foreach(x => print(x * x + "  "))
	filter：过滤每一个元素，有返回值，它需要过滤条件			-----> 		arr.filter(_ % 2 == 0)
	reduceLeft：聚合每一个元素，有返回值
	  [B >: A](op: (B, A) => B): B							----->		arr.reduceLeft(_ % _)
	  每次中间聚合结果值都放在左侧，每次进来的元素放在右侧，然后依次计算
	sortWith：排序每一个元素，有返回值		-----> 		arr.sortWith(_ > _)
	大于号是降序，小于号是升序
	flatMap：切分压平每一个元素，有返回值			----->		Array[String] = Array(hello, world, every)

																									a.flatMap(_.split("l"))

	是flatten.map()的组合
	
	
	
	
	
	

