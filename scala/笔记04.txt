1. 泛型
	视界 View Bounds <%
	它支持父子关系的多种类型，但是如果是一个无关的类，想要在父子类中进行调用的话，需要使用隐式转换的方式，这个View Bounds相当于整合了上界和下界，是一个结合体
	上下文边界 Context Bounds （了解）
	属于全局上下文限定，需要在这个里面用到隐式值的注入
2. 隐式转换 Implicit （重点）  implicit 用来修饰方法
	Scala会自动使用隐式转换函数，隐式转换函数和普通函数唯一的区别在于要以Implicit声明，而且需要放在头部
	1. 隐式转换
	案例：人狗交朋友
			class Person(val name:String)

			class Teahcer(name:String) extends Person(name)

			class Dog(val name:String)

			class make{
			  def getFriends(p:Person): Unit = {
				println("hello I'm " + p.name)
			  }
			}

			object test1 extends App {
				
				//隐式转换要生效需要导包
			  import cn.day03.Dog2Person.dog2Per
			  val any: Person = new Person("any")

			  val liming: Teahcer = new Teahcer("liming")

			  val ahuang: Dog = new Dog("ahuang")

			  val make = new make

			  make.getFriends(ahuang)
			}
			
			//隐式转换的声明
			object Dog2Person {
			  implicit def dog2Per (obj:Object):Person = {
				if (obj.isInstanceOf[Dog]) {
				  val dog = obj.asInstanceOf[Dog]
				  new Person(dog.name)
				}else {
				  null
				}
			  }
			}

	2. 隐式参数
	案例：考试签到 ---> 隐式参数需要定义在参数列表最后面,和前面 的参数使用不同的小括号隔开, 定义的隐式方法即便在一个类文件中也需要进行导包
			object npen {
				  implicit def newPen= {
					new Pen("英雄")
				  }
				}

				class Pen(val name:String) {

				}

				class Student(val name:String) {

				}

				class Written {
				  def writ(student:Student)(implicit pen:Pen){
					println(student.name + "使用了" + pen.name + "钢笔进行了签到!")
				  }

				}

				object test2 extends App {
				  import cn.day03.npen.newPen

				  val pen = new Pen("英雄")

				  val xiaoming = new Student("xiaoming")

				  val wr = new Written
				  wr.writ(xiaoming)
				}

	隐式调用会先scala自身的类库中寻找合适的转换操作，如果没有，就去我们给他定义好的位置找到implicit声明的方法或者变量,  --->   在scala自身类库中的predef中
3. Actor模型（了解）
	Scala的Actor类似于Java中的多线程编程。
	但是不同的是，Scala的Actor提供的模型与多线程有所不同。
	Scala的Actor尽可能地避免锁和共享状态，从而避免多线程并发时出现资源争用的情况，进而提升多线程编程的性能。
	此外，Scala Actor的这种模型还可以避免死锁等一系列传统多线程编程的问题。
	
	Actor发送消息的三种方式
		! 第一种表示异步发送消息，无返回值
		!?第二种表示同步发送消息，有返回值（死锁问题）
		!!第三种表示异步发送消息，无返回值（可以有返回值需要实现Futrue）
	
	Actor启动步骤：
		1.创建一个类继承Actor
		2.实现Actor中的act方法
		3.实例化类，调用start()启动
		4.实现消息的接收发送
4. Akka（了解）
	AKKA简介
	目前大多数的分布式架构底层通信都是通过RPC实现的，RPC框架非常多，比如前我们学过的Hadoop项目的RPC通信框架，但是Hadoop在设计之初就是为了运行长达数小时的批量而设计的，在某些极端的情况下，任务提交的延迟很高，所以Hadoop的RPC显得有些笨重。
	
	Spark 的RPC是通过Akka类库实现的，Akka用Scala语言开发，基于Actor并发模型实现，Akka具有高可靠、高性能、可扩展等特点，使用Akka可以轻松实现分布式RPC功能。
	
	Akka基于Actor模型，提供了一个用于构建可扩展的、弹性的、快速响应的应用程序的平台。
	
	Actor模型：在计算机科学领域，Actor模型是一个并行计算（Concurrent Computation）模型，它把actor作为并行计算的基本元素来对待：为响应一个接收到的消息，一个actor能够自己做出一些决策，如创建更多的actor，或发送更多的消息，或者确定如何去响应接收到的下一个消息。
	
	Akka是基于Actor模型的，也就是对Actor模型的一种封装。
	
	Spark 1.0 - 1.3之间默认用的是Akka模型
	Spark 1.3 - 1.6之间默认用的是Netty模型（Akka没有被弃用）
	Spark 2.X以上，Akka完全被弃用。
	
	Akka的内部实现方法：
	
	ActorSystem对象：可以创建Actor
	Prestart方法：该方法是用于初始化操作的
	Receive方法：不停地接收和发送消息的
	
	